local BRAND={name="MeatlyOS",version="v1.0",logo=[[ == Welcome To MeatlyOS! == ]]}
term.setTextColor(colors.cyan) print(BRAND.logo) print(BRAND.name.." "..BRAND.version) term.setTextColor(colors.white)
local function prompt() io.write("["..BRAND.name.."]> ") end
if not os.pullEventTimeout then function os.pullEventTimeout(name,timeout) local timer;if timeout then timer=os.startTimer(timeout) end while true do local e={os.pullEvent()}; if e[1]=="timer" and e[2]==timer then return nil end;if not name or e[1]==name then return table.unpack(e) end end end end
local protectedFiles={[shell.getRunningProgram()]=true,["/startup"]=true,["/disk"]=true} local hideSource=true
local fs_open_orig=fs.open fs.open=function(path,mode,...) if protectedFiles[path] and (mode=="w" or mode=="a") then error("Attempt to modify protected file: "..path) end if hideSource and mode=="r" and protectedFiles[path] then error("Attempt to read protected file: "..path) end return fs_open_orig(path,mode,...) end
local fs_delete_orig=fs.delete fs.delete=function(path,...) if protectedFiles[path] or path=="/" then error("Attempt to delete protected file or root") end return fs_delete_orig(path,...) end
local fs_list_orig=fs.list fs.list=function(path,...) local t=fs_list_orig(path,...) if hideSource and (path=="/" or path=="") then local filtered={} for _,v in ipairs(t) do if not protectedFiles["/"..v] then table.insert(filtered,v) end end return filtered end return t end
local shell_run_orig=shell.run shell.run=function(cmd,...) if cmd:match("install") or cmd:match("os") then error("OS install commands are blocked by OEM lock") end return shell_run_orig(cmd,...) end
local DATAFILE="/.phonedata" local myNumber=nil local currentTower={id=nil,name=nil,lastSeen=0,rssi=nil} local inbox={} 
local function saveData() local f=fs.open(DATAFILE,"w") f.write(textutils.serialize({number=myNumber})) f.close() end
local function loadData() if fs.exists(DATAFILE) then local f=fs.open(DATAFILE,"r") local d=textutils.unserialize(f.readAll()) f.close() if d and d.number then myNumber=d.number end end end
loadData()
local BEACON_CH=65500
local modemSide=nil
for _,side in ipairs(peripheral.getNames()) do if peripheral.getType(side)=="modem" then local m=peripheral.wrap(side) if m.isWireless and m.isWireless() then modemSide=side break end end end
if not modemSide then print("ERROR: No wireless modem found.") return end
rednet.open(modemSide) peripheral.call(modemSide,"open",BEACON_CH)
local function tsFmt(ms)local s=math.floor(ms/1000) return textutils.formatTime((s%86400)/1000,true) end
local function drawStatus() term.setTextColor(colors.cyan) print(("-- PHONE -- Number: "..tostring(myNumber or "(unset)"))) term.setTextColor(colors.yellow) if currentTower.id then local age=os.clock()-currentTower.lastSeen print(("Tower: %s (ID %d) age: %.1fs"):format(currentTower.name,currentTower.id,age)) else print("Tower: (not connected)") end term.setTextColor(colors.white) end
local SCAN_TIME=3
local function scanForTower() print("Scanning for towers...") local best=nil local deadline=os.clock()+SCAN_TIME while os.clock()<deadline do local ev,side,ch,reply,msg,dist=os.pullEventTimeout("modem_message",0.2) if ev=="modem_message" and ch==BEACON_CH and type(msg)=="table" and msg.kind=="cell_beacon" then local rec={name=msg.tower,id=msg.id,dist=dist or math.huge,last=os.clock()} if not best or rec.dist<best.dist then best=rec end end end if best then currentTower.id,currentTower.name=best.id,best.name currentTower.lastSeen=best.last currentTower.rssi=best.dist print(("-> Connected to tower %s (ID %d)"):format(best.name,best.id)) return true else print("No towers found.") return false end end
local PROTO_CTRL="cell.ctrl" local PROTO_DATA="cell.data" local KEEPALIVE=25
local function registerIfNeeded() if not currentTower.id then return false end if not myNumber then print("Set your number: setnumber 555-0101") return false end rednet.send(currentTower.id,{type="register",number=myNumber},PROTO_CTRL) local t=os.clock()+2 while os.clock()<t do local ev,id,msg,proto=os.pullEventTimeout("rednet_message",0.2) if ev and id==currentTower.id and proto==PROTO_CTRL then if msg.type=="reg_ack" then print(("Registered with %s"):format(msg.tower)) return true elseif msg.type=="denied" then print("Registration denied: "..tostring(msg.reason)) currentTower.id=nil return false elseif msg.type=="assign_number" then myNumber=msg.number saveData() print("[INFO] Tower reassigned your number: "..myNumber) end end end return false end
local function keepaliver() while true do if currentTower.id then rednet.send(currentTower.id,{type="keepalive"},PROTO_CTRL) end sleep(KEEPALIVE) end end
local function receiver() while true do local ev,id,msg,proto=os.pullEvent("rednet_message") if proto==PROTO_DATA and type(msg)=="table" and msg.type=="deliver" then table.insert(inbox,{from=msg.from,body=msg.body,ts=msg.ts or os.epoch("utc")}) term.setTextColor(colors.lime) print(("\n[SMS] from %s: %s"):format(msg.from,msg.body)) term.setTextColor(colors.white) prompt() elseif proto==PROTO_CTRL and type(msg)=="table" then if msg.type=="assign_number" then myNumber=msg.number saveData() term.setTextColor(colors.orange) print(("\n[INFO] Tower reassigned your number: %s"):format(myNumber)) term.setTextColor(colors.white) prompt() elseif msg.type=="denied" then term.setTextColor(colors.red) print("\n[NETWORK] Registration denied: "..tostring(msg.reason)) term.setTextColor(colors.white) currentTower.id=nil prompt() end end end end
local UPDATE_URL="https://raw.githubusercontent.com/biggiecheesetherat/cc-cellservice/main/phone.lua"
local function updateFirmware() print("Downloading latest firmware...") local h=http.get(UPDATE_URL) if not h then print("Update failed"); return end local data=h.readAll() h.close() if not data or data=="" then print("Update failed: empty file"); return end protectedFiles[shell.getRunningProgram()]=false local f=fs.open(shell.getRunningProgram(),"w") f.write(data) f.close() protectedFiles[shell.getRunningProgram()]=true print("Update complete! Rebooting...") sleep(1) os.reboot() end
local function help() print([[Commands: help setnumber <num> scan where sms <to> <msg> inbox updatephonefirmware clear exit]]) end
local function cmdloop() help() while true do prompt() local line=read() if not line then break end local args={} for w in line:gmatch("%S+") do table.insert(args,w) end local cmd=args[1] if cmd=="help" then help() elseif cmd=="setnumber" and args[2] then if myNumber then print("Number already assigned. Only tower can change it.") else myNumber=args[2] saveData() print("Number set to "..myNumber) if currentTower.id then registerIfNeeded() end end elseif cmd=="scan" then if scanForTower() then registerIfNeeded() end elseif cmd=="where" then drawStatus() elseif cmd=="sms" and args[2] then if not currentTower.id then print("Not connected") goto continue end if not myNumber then print("Set your number first") goto continue end local to=args[2] local body=line:match("^%s*sms%s+%S+%s+(.+)$") or "" if body=="" then print("Message empty") goto continue end rednet.send(currentTower.id,{type="send",to=to,body=body},PROTO_DATA) print("Message queued to tower.") elseif cmd=="inbox" then if #inbox==0 then print("(empty)") else for i,m in ipairs(inbox) do print(("[%02d] %s  from %s"):format(i,tsFmt(m.ts),m.from)) print("     "..m.body) end end elseif cmd=="updatephonefirmware" then updateFirmware() elseif cmd=="clear" then term.clear(); term.setCursorPos(1,1); drawStatus() elseif cmd=="exit" then print("Bye."); return elseif cmd and cmd~="" then print("Unknown command") end ::continue:: end end
local function watchBeacons() while true do local ev,side,ch,reply,msg,dist=os.pullEvent("modem_message") if ch==BEACON_CH and type(msg)=="table" and msg.kind=="cell_beacon" then if currentTower.id==msg.id then currentTower.lastSeen=os.clock() currentTower.rssi=dist end end end end
parallel.waitForAny(receiver,keepaliver,watchBeacons,cmdloop)
